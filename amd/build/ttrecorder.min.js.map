{"version":3,"file":"ttrecorder.min.js","sources":["../src/ttrecorder.js"],"sourcesContent":["define(['jquery', 'core/log','core/notification', 'mod_readaloud/ttaudiohelper','mod_readaloud/ttbrowserrec',\n    'core/str','mod_readaloud/timer','mod_readaloud/ttmsspeech'],\n    function ($, log, notification, audioHelper, browserRec, str, timer, msspeech) {\n    \"use strict\"; // jshint ;_;\n    /*\n    *  The TT recorder\n     */\n\n    log.debug('TT Recorder: initialising');\n\n    return {\n        waveHeight: 75,\n        audio: {\n            stream: null,\n            blob: null,\n            dataURI: null,\n            start: null,\n            end: null,\n            isRecording: false,\n            isRecognizing: false,\n            isWaiting: false,\n            transcript: null\n        },\n        submitting: false,\n        owner: '',\n        controls: {},\n        uniqueid: null,\n        audio_updated: null,\n        maxtime: 0,\n        passagehash: null,\n        region: null,\n        asrurl: null,\n        lang: null,\n        browserrec: null,\n        usebrowserrec: false,\n        currentTime: 0,\n        stt_guided: false,\n        currentPrompt: false,\n        speechtoken: '',\n        speechtokentype: '',\n        forcestreaming: false,\n        is_streaming: false,\n        using_msspeech: false,\n        strings: {},\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(opts){\n\n            var that = this;\n            this.uniqueid=opts['uniqueid'];\n            this.callback=opts['callback'];\n            this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n            this.init_strings();\n            this.prepare_html();\n            this.controls.recordercontainer.show();\n            this.register_events();\n\n            //token check\n            this.using_msspeech = this.can_msspeech();\n            if(this.using_msspeech){\n                var referencetext = opts['referencetext'];\n                msspeech.init(this.speechtoken, this.region, this.lang, referencetext);\n            }\n\n            // Callback: Timer updates.\n            var handle_timer_update = function(){\n                var displaytime = that.timer.fetch_display_time();\n                that.controls.timerstatus.html(displaytime);\n                log.debug('timer_seconds: ' + that.timer.seconds);\n                log.debug('displaytime: ' + displaytime);\n                if (that.timer.seconds == 0 && that.timer.initseconds > 0) {\n                    that.update_audio('isRecognizing', true);\n                    if(that.usebrowserrec){\n                        that.browserrec.stop();\n                    }else{\n                        that.audiohelper.stop();\n                    }\n                }\n            };\n\n            // Callback: Recorder device errors.\n            var on_error = function(error) {\n                switch (error.name) {\n                    case 'PermissionDeniedError':\n                    case 'NotAllowedError':\n                        notification.alert(\"Error\",that.strings.allowmicaccess, \"OK\");\n                        break;\n                    case 'DevicesNotFoundError':\n                    case 'NotFoundError':\n                        notification.alert(\"Error\",that.strings.nomicdetected, \"OK\");\n                        break;\n                    default:\n                        //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                        //notification.alert(\"Error\", error.name, \"OK\");\n                        log.debug(\"Error\", error.name);\n                }\n            };\n\n            // Callback: Recording stopped.\n            var on_stopped = function(blob) {\n                that.timer.stop()\n\n                //if the blob is undefined then the user is super clicking or something\n                if(blob===undefined){\n                    return;\n                }\n\n                //Update our current audio object\n                var newaudio = {\n                    blob: blob,\n                    dataURI: URL.createObjectURL(blob),\n                    end: new Date(),\n                    isRecording: false,\n                    length: Math.round((that.audio.end - that.audio.start) / 1000),\n                };\n                that.update_audio(newaudio);\n\n                //if we are not streaming then upload_transcribe (ie send to poodll servers)\n                if(!that.is_streaming){\n                    if(that.using_msspeech){\n                        that.do_msspeech(that.audio.blob, function(response){\n                            that.gotMSResults(response);\n                            that.update_audio('isRecognizing',false);\n                        });\n                    }else{\n                        that.upload_transcribe(that.audio.blob, function(response){\n                            log.debug(response);\n                            if(response.data.result===\"success\" && response.data.transcript){\n                                that.gotRecognition(response.data.transcript.trim());\n                            } else {\n                                notification.alert(\"Information\",that.strings.speechnotrecognized, \"OK\");\n                            }\n                            that.update_audio('isRecognizing',false);\n                        });\n                    }\n                }\n\n            };\n\n            // Callback: Recorder device got stream - start recording\n            var on_gotstream=  function(stream) {\n                var newaudio={stream: stream, isRecording: true, isWaiting: false};\n                that.update_audio(newaudio);\n            };\n\n            //If browser rec (Chrome Speech Rec) \n            if(browserRec.will_work_ok() && ! this.stt_guided && !this.forcestreaming && !this.using_msspeech){\n                //Init browserrec\n                log.debug(\"using browser rec\");\n                this.browserrec = browserRec.clone();\n                this.browserrec.init(this.lang,this.waveHeight,this.uniqueid);\n                this.usebrowserrec=true;\n\n                //set up events\n                that.browserrec.onerror = on_error;\n                that.browserrec.onend = function(){\n                        //do something here\n                };\n                that.browserrec.onstart = function(){\n                    //do something here\n                };\n                that.browserrec.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n                that.browserrec.oninterimspeechcapture=function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n\n            //If we have a streaming token\n            }else if( this.can_stream() && !this.stt_guided ) {\n                this.is_streaming = true;\n                //Init streaming audio helper\n                log.debug(\"using audio helper and streaming rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid, this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n                that.audiohelper.onfinalspeechcapture = function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n                that.audiohelper.oninterimspeechcapture = function(speechtext){\n                    that.gotInterimRecognition(speechtext);\n                };\n                \n            //If upload_transcriber\n            } else {\n                //set up upload_transcriber\n                log.debug(\"using upload_transcriber\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n\n            }//end of setting up recorders\n\n            // Setting up timer.\n            this.timer = timer.clone();\n            this.timer.init(this.maxtime, handle_timer_update);\n            // Init the timer readout\n            handle_timer_update();\n        },\n\n        can_stream: function( ){\n            return (this.speechtoken && this.speechtoken !== 'false'&& this.speechtokentype == 'assemblyai' && !this.stt_guided);\n        },\n\n        can_msspeech: function( ){\n            return (this.speechtoken && this.speechtoken !== 'false' && this.speechtokentype === 'msspeech');\n        },\n\n        blobToArrayBuffer: function (blob) {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = function(event) {\n                    resolve(event.target.result);\n                };\n                reader.onerror = function(error) {\n                    reject(error);\n                };\n                reader.readAsArrayBuffer(blob);\n            });\n        },\n\n        init_strings: function(){\n            var that=this;\n            str.get_strings([\n                { \"key\": \"allowmicaccess\", \"component\": 'mod_readaloud'},\n                { \"key\": \"nomicdetected\", \"component\": 'mod_readaloud'},\n                { \"key\": \"speechnotrecognized\", \"component\": 'mod_readaloud'},\n\n            ]).done(function (s) {\n                var i = 0;\n                that.strings.allowmicaccess = s[i++];\n                that.strings.nomicdetected = s[i++];\n                that.strings.speechnotrecognized = s[i++];\n            });\n        },\n\n        prepare_html: function(){\n            this.controls.recordercontainer =$('#ttrec_container_' + this.uniqueid);\n            this.controls.recorderbutton = $('#' + this.uniqueid + '_recorderbutton');\n            this.controls.waveform = $('#' + this.uniqueid + '_waveform');\n            this.controls.timerstatus = $('.timerstatus_' + this.uniqueid);\n            this.passagehash = this.controls.recorderbutton.data('passagehash');\n            this.region=this.controls.recorderbutton.data('region');\n            this.lang=this.controls.recorderbutton.data('lang');\n            this.asrurl=this.controls.recorderbutton.data('asrurl');\n            this.speechtoken=this.controls.recorderbutton.data('speechtoken');\n            this.speechtokentype=this.controls.recorderbutton.data('speechtokentype');\n            this.forcestreaming=this.controls.recorderbutton.data('forcestreaming');\n            this.maxtime=this.controls.recorderbutton.data('maxtime');\n            this.waveHeight=this.controls.recorderbutton.data('waveheight');\n            this.controls.icon_mic = this.controls.recorderbutton.find('.ra_recbutton_mic');\n            this.controls.icon_stop = this.controls.recorderbutton.find('.ra_recbutton_stop');\n            this.controls.icon_waiting = this.controls.recorderbutton.find('.ra_recbutton_waiting');\n            this.controls.icon_processing = this.controls.recorderbutton.find('.ra_recbutton_processing');\n        },\n\n        silence_detected: function(){\n            if(this.audio.isRecording){\n                this.toggleRecording();\n            }\n        },\n\n        update_audio: function(newprops,val){\n            if (typeof newprops === 'string') {\n                log.debug('update_audio:' + newprops + ':' + val);\n                if (this.audio[newprops] !== val) {\n                    this.audio[newprops] = val;\n                    this.audio_updated();\n                }\n            }else{\n                for (var theprop in newprops) {\n                    this.audio[theprop] = newprops[theprop];\n                    log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                }\n                this.audio_updated();\n            }\n        },\n\n        register_events: function(){\n            var that = this;\n            this.controls.recordercontainer.click(function(){\n                that.toggleRecording();\n            });\n\n            this.audio_updated=function() {\n                //pointer\n                if (that.audio.isRecognizing || that.audio.isWaiting ) {\n                    that.show_recorder_pointer('none');\n                } else {\n                    that.show_recorder_pointer('auto');\n                }\n                //the button color\n                /*\n                if(that.audio.isRecognizing || that.audio.isRecording || that.audio.isWaiting){\n                    this.controls.recorderbutton.removeClass('ttrec_ready');\n                    this.controls.recorderbutton.removeClass('ttrec_waiting');\n                    this.controls.waveform.removeClass('ttrec_waiting');\n                    this.controls.recorderbutton.addClass('ttrec_engaged');\n                }else if (that.audio.isWaiting && false) {\n                    this.controls.recorderbutton.removeClass('ttrec_engaged');\n                    this.controls.recorderbutton.removeClass('ttrec_ready');\n                    this.controls.recorderbutton.addClass('ttrec_waiting');\n                    this.controls.waveform.addClass('ttrec_waiting');\n                }else{\n                    this.controls.recorderbutton.removeClass('ttrec_engaged');\n                    this.controls.recorderbutton.removeClass('ttrec_waiting');\n                    this.controls.waveform.removeClass('ttrec_waiting');\n                    this.controls.recorderbutton.addClass('ttrec_ready');\n                }\n\n                 */\n\n                //the button html\n                //hide them all and then show the correct one\n                this.controls.icon_mic.hide();\n                this.controls.icon_stop.hide();\n                this.controls.icon_waiting.hide();\n                this.controls.icon_processing.hide();\n\n                if(!this.audio.isRecognizing){\n                    if (this.audio.isRecording) {\n                        this.controls.icon_stop.show();\n                    } else if(this.audio.isWaiting) {\n                        this.controls.icon_waiting.show();\n                    } else {\n                        this.controls.icon_mic.show();\n                    }\n                } else {\n                    this.controls.icon_processing.show();\n                }\n            };\n\n        },\n\n        show_recorder_pointer: function(show){\n            if(show) {\n                this.controls.recorderbutton.css('pointer-events', 'none');\n            }else{\n                this.controls.recorderbutton.css('pointer-events', 'auto');\n            }\n\n        },\n\n        gotMSResults:function(results){\n            log.debug(results);\n            var message={};\n            message.type='pronunciation_results';\n            message.results = results;\n            this.callback(message);\n        },\n\n        gotRecognition:function(transcript){\n            log.debug('transcript:' + transcript);\n            if(transcript.trim()==''){return;}\n            var message={};\n            message.type='speech';\n            message.capturedspeech = transcript;\n            this.callback(message);\n        },\n\n        gotInterimRecognition:function(transcript){\n            var message={};\n            message.type='interimspeech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        cleanWord: function(word) {\n            return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n        },\n\n        toggleRecording: function() {\n            var that =this;\n\n            //If we are recognizing, then we want to discourage super click'ers\n            if (this.audio.isRecognizing || this.audio.isWaiting) {\n                return;\n            }\n\n            //If we are currently recording\n            if (this.audio.isRecording) {\n                that.timer.stop();\n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',true);\n                    this.browserrec.stop();\n                //If using upload_transcriber or streaming\n                }else{\n                    this.update_audio('isRecognizing',true);\n                    this.audiohelper.stop();\n                }\n\n                //lets notify the caller we stopped recording\n                log.debug('recording stopped:');\n                var message={};\n                message.type='recordingstopped';\n                that.callback(message);\n\n             //If we are NOT currently recording\n            } else {\n                // Run the timer\n                that.currentTime = 0;\n                that.timer.reset();\n                that.timer.start();\n                \n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    this.update_audio('isRecording',true);\n                    this.browserrec.start();\n\n                //If using Audio helper for upload_transcriber or streaming\n                }else {\n                    var newaudio = {\n                        stream: null,\n                        blob: null,\n                        dataURI: null,\n                        start: new Date(),\n                        end: null,\n                        isRecording: false,\n                        isRecognizing: false,\n                        isWaiting: true,\n                        transcript: null\n                    };\n                    this.update_audio(newaudio);\n                    this.audiohelper.start();\n                }\n\n                //lets notify the caller we stopped recording\n                log.debug('recording started:');\n                var message={};\n                message.type='recordingstarted';\n                that.callback(message);\n            }\n        },\n\n        upload_transcribe: function(blob, callback) {\n            var bodyFormData = new FormData();\n            var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n            bodyFormData.append('audioFile', blob, blobname);\n            bodyFormData.append('scorer', this.passagehash);\n            if(this.stt_guided) {\n                bodyFormData.append('strictmode', 'false');\n            }else{\n                bodyFormData.append('strictmode', 'true');\n            }\n            //prompt is used by whisper and other transcibers down the line\n            if(this.currentPrompt!==false){\n                bodyFormData.append('prompt', this.currentPrompt);\n            }\n            bodyFormData.append('lang', this.lang);\n            bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"POST\", this.asrurl, true);\n            oReq.onUploadProgress= function(progressEvent) {};\n            oReq.onload = function(oEvent) {\n                if (oReq.status === 200) {\n                    callback(JSON.parse(oReq.response));\n                } else {\n                    callback({data: {result: \"error\"}});\n                    log.debug(oReq.error);\n                }\n            };\n            try {\n                oReq.send(bodyFormData);\n            }catch(err){\n                callback({data: {result: \"error\"}});\n                log.debug(err);\n            }\n        },\n\n        do_msspeech: function(blob, callback) {\n            msspeech.recognize(blob,callback)\n        },\n\n    };//end of return value\n\n});"],"names":["define","$","log","notification","audioHelper","browserRec","str","timer","msspeech","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","isWaiting","transcript","submitting","owner","controls","uniqueid","audio_updated","maxtime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","speechtoken","speechtokentype","forcestreaming","is_streaming","using_msspeech","strings","clone","extend","this","init","opts","that","callback","init_strings","prepare_html","recordercontainer","show","register_events","can_msspeech","referencetext","handle_timer_update","displaytime","fetch_display_time","timerstatus","html","seconds","initseconds","update_audio","stop","audiohelper","on_error","error","name","alert","allowmicaccess","nomicdetected","on_stopped","undefined","newaudio","URL","createObjectURL","Date","length","Math","round","do_msspeech","response","gotMSResults","upload_transcribe","data","result","gotRecognition","trim","speechnotrecognized","on_gotstream","will_work_ok","can_stream","onError","onStop","onStream","onfinalspeechcapture","speechtext","oninterimspeechcapture","gotInterimRecognition","onerror","onend","onstart","blobToArrayBuffer","Promise","resolve","reject","reader","FileReader","onload","event","target","readAsArrayBuffer","get_strings","done","s","i","recorderbutton","waveform","icon_mic","find","icon_stop","icon_waiting","icon_processing","silence_detected","toggleRecording","newprops","val","theprop","click","show_recorder_pointer","hide","css","results","message","capturedspeech","cleanWord","word","replace","toLowerCase","reset","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","oEvent","status","JSON","parse","send","err","recognize"],"mappings":"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"}